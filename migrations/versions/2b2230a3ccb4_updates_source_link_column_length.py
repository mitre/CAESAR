"""updates source_link column length

Revision ID: 2b2230a3ccb4
Revises: 791ab40d36f7
Create Date: 2024-11-13 17:09:50.167755

"""
from alembic import op
from sqlalchemy import MetaData
from sqlalchemy.sql.expression import update
from sqlalchemy.schema import Table, Column, Computed
from sqlalchemy.types import VARCHAR
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '2b2230a3ccb4'
down_revision = '791ab40d36f7'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    conn = op.get_bind()
    metadata = MetaData(bind=conn)
    MetaData.reflect(metadata)
    original_bulletin_table = metadata.tables['bulletin']
    original_actor_table = metadata.tables['actor']

    # View the columns present in the users table
    # This migration is meant to move the type of the column from VARCHAR(255) to VARCHAR
    # If the type of the column is not initially VARCHAR(255), this migration should do nothing
    if original_bulletin_table.c.source_link.type.length == 255:
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.add_column(sa.Column('source_link_copy', sa.String(), nullable=True))
            
        # the original reflected object does not have the source_link_copy column 
        metadata = MetaData()
        bulletin_table = Table("bulletin", metadata, Column('source_link'), Column('source_link_copy'))
    
        # copy the initial values of source_link into a new column
        conn = op.get_bind()
        statement = update(bulletin_table).values(source_link_copy=bulletin_table.c.source_link)
        conn.execute(statement)

        # search is a computed property. It does not actually have a column of stored values. The column contents cannot be copied.

        # delete search and source_link and recreate them 
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.drop_column('search')
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.drop_column('source_link')
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.add_column(sa.Column('source_link', sa.String(), nullable=True))
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.add_column(sa.Column('search', sa.Text(), nullable=True, server_default=Computed("(((((((((((((((((id)::text || ' '::text) || (COALESCE(title, ''::character varying))::text) || ' '::text) || (COALESCE(title_ar, ''::character varying))::text) || ' '::text) || COALESCE(description, ''::text)) || ' '::text) || (COALESCE(originid, ''::character varying))::text) || ' '::text) || (COALESCE(sjac_title, ''::character varying))::text) || ' '::text) || (COALESCE(sjac_title_ar, ''::character varying))::text) || ' '::text) || (COALESCE(source_link, ''::character varying))::text) || ' '::text) ||  ' '::text) || COALESCE(comments, ''::text)")))

        # copy the values saved in source_link_copy back to the original source_link column
        conn = op.get_bind()
        statement = update(bulletin_table).values(source_link=bulletin_table.c.source_link_copy)
        conn.execute(statement)

        # delete the source_link_copy column
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.drop_column('source_link_copy')
    else:
        print("Revision 2b2230a3ccb4 did not need to update the bulletin source_link length.")

    if original_actor_table.c.source_link.type.length == 255:
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.add_column(sa.Column('source_link_copy', sa.String(), nullable=True))
            
        # the original reflected object does not have the source_link_copy column 
        metadata = MetaData()
        actor_table = Table("actor", metadata, Column('source_link'), Column('source_link_copy'))
    
        # copy the initial values of source_link into a new column
        conn = op.get_bind()
        statement = update(actor_table).values(source_link_copy=actor_table.c.source_link)
        conn.execute(statement)

        # search is a computed property. It does not actually have a column of stored values. The column contents cannot be copied.

        # delete search and source_link and recreate them 
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.drop_column('search')
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.drop_column('source_link')
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.add_column(sa.Column('source_link', sa.String(), nullable=True))
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.add_column(sa.Column('search', sa.Text(), nullable=True, server_default=Computed("(((((((((((((id)::text || ' '::text) || (COALESCE(name, ''::character varying))::text) || ' '::text) || (COALESCE(name_ar, ''::character varying))::text) || ' '::text) || (COALESCE(originid, ''::character varying))::text) || ' '::text) || (COALESCE(source_link, ''::character varying))::text) || ' '::text) || COALESCE(description, ''::text)) || ' '::text) || COALESCE(comments, ''::text))")))

        # copy the values saved in source_link_copy back to the original source_link column
        conn = op.get_bind()
        statement = update(actor_table).values(source_link=actor_table.c.source_link_copy)
        conn.execute(statement)

        # delete the source_link_copy column
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.drop_column('source_link_copy')
    else:
        print("Revision 2b2230a3ccb4 did not need to update the actor source_link length.")
    
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    metadata = MetaData(bind=conn)
    MetaData.reflect(metadata)
    original_bulletin_table = metadata.tables['bulletin']
    original_actor_table = metadata.tables['actor']

    # View the columns present in the users table
    if original_bulletin_table.c.source_link.type.length != 255:
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.add_column(sa.Column('source_link_copy', sa.String(), nullable=True))
        
        # the original reflected object does not have the source_link_copy column 
        metadata = MetaData()
        bulletin_table = Table("bulletin", metadata, Column('source_link'), Column('source_link_copy'))

        # copy the initial values of source_link into a new column
        conn = op.get_bind()
        statement = update(bulletin_table).values(source_link_copy=bulletin_table.c.source_link)
        conn.execute(statement)

        # search is a computed property. It does not actually have a column of stored values. The column contents cannot be copied.

        # delete search and source_link and recreate them 
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.drop_column('search')
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.drop_column('source_link')
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.add_column(sa.Column('source_link', sa.String(255), nullable=True))
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.add_column(sa.Column('search', sa.Text(), nullable=True, server_default=Computed("(((((((((((((((((id)::text || ' '::text) || (COALESCE(title, ''::character varying))::text) || ' '::text) || (COALESCE(title_ar, ''::character varying))::text) || ' '::text) || COALESCE(description, ''::text)) || ' '::text) || (COALESCE(originid, ''::character varying))::text) || ' '::text) || (COALESCE(sjac_title, ''::character varying))::text) || ' '::text) || (COALESCE(sjac_title_ar, ''::character varying))::text) || ' '::text) || (COALESCE(source_link, ''::character varying))::text) || ' '::text) ||  ' '::text) || COALESCE(comments, ''::text)")))

        # copy the values saved in source_link_copy back to the original source_link column
        conn = op.get_bind()
        statement = update(bulletin_table).values(source_link=bulletin_table.c.source_link_copy)
        conn.execute(statement)

        # delete the source_link_copy column
        with op.batch_alter_table('bulletin', schema=None) as batch_op:
            batch_op.drop_column('source_link_copy')
    else:
        print("Down revision to 791ab40d36f7 did not need to set the bulletin source_link length.")

    if original_actor_table.c.source_link.type.length != 255:
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.add_column(sa.Column('source_link_copy', sa.String(), nullable=True))
        
        # the original reflected object does not have the source_link_copy column 
        metadata = MetaData()
        actor_table = Table("actor", metadata, Column('source_link'), Column('source_link_copy'))

        # copy the initial values of source_link into a new column
        conn = op.get_bind()
        statement = update(actor_table).values(source_link_copy=actor_table.c.source_link)
        conn.execute(statement)

        # search is a computed property. It does not actually have a column of stored values. The column contents cannot be copied.

        # delete search and source_link and recreate them 
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.drop_column('search')
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.drop_column('source_link')
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.add_column(sa.Column('source_link', sa.String(255), nullable=True))
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.add_column(sa.Column('search', sa.Text(), nullable=True, server_default=Computed("(((((((((((((id)::text || ' '::text) || (COALESCE(name, ''::character varying))::text) || ' '::text) || (COALESCE(name_ar, ''::character varying))::text) || ' '::text) || (COALESCE(originid, ''::character varying))::text) || ' '::text) || (COALESCE(source_link, ''::character varying))::text) || ' '::text) || COALESCE(description, ''::text)) || ' '::text) || COALESCE(comments, ''::text))")))

        # copy the values saved in source_link_copy back to the original source_link column
        conn = op.get_bind()
        statement = update(actor_table).values(source_link=actor_table.c.source_link_copy)
        conn.execute(statement)

        # delete the source_link_copy column
        with op.batch_alter_table('actor', schema=None) as batch_op:
            batch_op.drop_column('source_link_copy')
    else:
        print("Down revision to 791ab40d36f7 did not need to set the actor source_link length.")

    # ### end Alembic commands ###
