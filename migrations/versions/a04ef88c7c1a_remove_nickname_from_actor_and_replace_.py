"""remove nickname from actor and replace with aliases

Revision ID: a04ef88c7c1a
Revises: b3232e22402f
Create Date: 2024-04-29 14:54:11.495856

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a04ef88c7c1a'
down_revision = 'b3232e22402f'
branch_labels = None
depends_on = None

def column_exists(table_name, column_name):
    bind = op.get_context().bind
    insp = sa.inspect(bind)
    columns = insp.get_columns(table_name)
    return any(c["name"] == column_name for c in columns)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('actor', schema=None) as batch_op:
        if column_exists('actor', 'nickname'):
            # Create alias for deleted nickname
            op.execute("""INSERT INTO alias (actor_id, name, name_ar, created_at, updated_at)
                            SELECT id, nickname, nickname_ar, NOW(), NOW() FROM actor WHERE nickname IS NOT NULL""")
            batch_op.drop_column('nickname')
        if column_exists('actor', 'nickname_ar'):
            batch_op.drop_column('nickname_ar')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('actor', schema=None) as batch_op:
        if not column_exists('actor', 'nickname'):
            batch_op.add_column(sa.Column('nickname', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        if not column_exists('actor', 'nickname_ar'):
            batch_op.add_column(sa.Column('nickname_ar', sa.VARCHAR(length=255), autoincrement=False, nullable=True))

    # ### end Alembic commands ###
